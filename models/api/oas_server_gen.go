// Code generated by ogen, DO NOT EDIT.

package apimodels

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetPublicKey implements getPublicKey operation.
	//
	// Get a public key from its usage.
	//
	// GET /public-keys
	GetPublicKey(ctx context.Context, params GetPublicKeyParams) (GetPublicKeyRes, error)
	// Healthcheck implements healthcheck operation.
	//
	// Returns a detailed report of the health of the service, including every dependency.
	//
	// GET /healthcheck
	Healthcheck(ctx context.Context) (HealthcheckRes, error)
	// ListPublicKeys implements listPublicKeys operation.
	//
	// Get all public keys from the service that match a given usage.
	//
	// GET /public-keys/list
	ListPublicKeys(ctx context.Context, params ListPublicKeysParams) (ListPublicKeysRes, error)
	// Ping implements ping operation.
	//
	// Check the status of the service. If the service is running, a successful response is returned.
	//
	// GET /ping
	Ping(ctx context.Context) (PingRes, error)
	// SignClaims implements signClaims operation.
	//
	// Sign a payload using the configuration for the target usage.
	//
	// POST /payload/sign
	SignClaims(ctx context.Context, req SignClaimsReq, params SignClaimsParams) (SignClaimsRes, error)
	// NewError creates *UnexpectedErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *UnexpectedErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
