// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package servicesmocks

import (
	"context"

	"github.com/a-novel-kit/jwt/jwa"
	"github.com/a-novel/service-json-keys/internal/dao"
	"github.com/a-novel/service-json-keys/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenerateKeySource creates a new instance of MockGenerateKeySource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateKeySource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateKeySource {
	mock := &MockGenerateKeySource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerateKeySource is an autogenerated mock type for the GenerateKeySource type
type MockGenerateKeySource struct {
	mock.Mock
}

type MockGenerateKeySource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateKeySource) EXPECT() *MockGenerateKeySource_Expecter {
	return &MockGenerateKeySource_Expecter{mock: &_m.Mock}
}

// InsertKey provides a mock function for the type MockGenerateKeySource
func (_mock *MockGenerateKeySource) InsertKey(ctx context.Context, data dao.InsertKeyData) (*dao.KeyEntity, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertKey")
	}

	var r0 *dao.KeyEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertKeyData) (*dao.KeyEntity, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dao.InsertKeyData) *dao.KeyEntity); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.KeyEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dao.InsertKeyData) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateKeySource_InsertKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertKey'
type MockGenerateKeySource_InsertKey_Call struct {
	*mock.Call
}

// InsertKey is a helper method to define mock.On call
//   - ctx
//   - data
func (_e *MockGenerateKeySource_Expecter) InsertKey(ctx interface{}, data interface{}) *MockGenerateKeySource_InsertKey_Call {
	return &MockGenerateKeySource_InsertKey_Call{Call: _e.mock.On("InsertKey", ctx, data)}
}

func (_c *MockGenerateKeySource_InsertKey_Call) Run(run func(ctx context.Context, data dao.InsertKeyData)) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertKeyData))
	})
	return _c
}

func (_c *MockGenerateKeySource_InsertKey_Call) Return(keyEntity *dao.KeyEntity, err error) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Return(keyEntity, err)
	return _c
}

func (_c *MockGenerateKeySource_InsertKey_Call) RunAndReturn(run func(ctx context.Context, data dao.InsertKeyData) (*dao.KeyEntity, error)) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Return(run)
	return _c
}

// SearchKeys provides a mock function for the type MockGenerateKeySource
func (_mock *MockGenerateKeySource) SearchKeys(ctx context.Context, usage models.KeyUsage) ([]*dao.KeyEntity, error) {
	ret := _mock.Called(ctx, usage)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*dao.KeyEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) ([]*dao.KeyEntity, error)); ok {
		return returnFunc(ctx, usage)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) []*dao.KeyEntity); ok {
		r0 = returnFunc(ctx, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.KeyEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage) error); ok {
		r1 = returnFunc(ctx, usage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenerateKeySource_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockGenerateKeySource_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx
//   - usage
func (_e *MockGenerateKeySource_Expecter) SearchKeys(ctx interface{}, usage interface{}) *MockGenerateKeySource_SearchKeys_Call {
	return &MockGenerateKeySource_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, usage)}
}

func (_c *MockGenerateKeySource_SearchKeys_Call) Run(run func(ctx context.Context, usage models.KeyUsage)) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage))
	})
	return _c
}

func (_c *MockGenerateKeySource_SearchKeys_Call) Return(keyEntitys []*dao.KeyEntity, err error) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Return(keyEntitys, err)
	return _c
}

func (_c *MockGenerateKeySource_SearchKeys_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage) ([]*dao.KeyEntity, error)) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrivateKeyGenericSource creates a new instance of MockPrivateKeyGenericSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrivateKeyGenericSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrivateKeyGenericSource {
	mock := &MockPrivateKeyGenericSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrivateKeyGenericSource is an autogenerated mock type for the PrivateKeyGenericSource type
type MockPrivateKeyGenericSource struct {
	mock.Mock
}

type MockPrivateKeyGenericSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrivateKeyGenericSource) EXPECT() *MockPrivateKeyGenericSource_Expecter {
	return &MockPrivateKeyGenericSource_Expecter{mock: &_m.Mock}
}

// SearchKeys provides a mock function for the type MockPrivateKeyGenericSource
func (_mock *MockPrivateKeyGenericSource) SearchKeys(ctx context.Context, usage models.KeyUsage) ([]*jwa.JWK, error) {
	ret := _mock.Called(ctx, usage)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*jwa.JWK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) ([]*jwa.JWK, error)); ok {
		return returnFunc(ctx, usage)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) []*jwa.JWK); ok {
		r0 = returnFunc(ctx, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jwa.JWK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage) error); ok {
		r1 = returnFunc(ctx, usage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPrivateKeyGenericSource_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockPrivateKeyGenericSource_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx
//   - usage
func (_e *MockPrivateKeyGenericSource_Expecter) SearchKeys(ctx interface{}, usage interface{}) *MockPrivateKeyGenericSource_SearchKeys_Call {
	return &MockPrivateKeyGenericSource_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, usage)}
}

func (_c *MockPrivateKeyGenericSource_SearchKeys_Call) Run(run func(ctx context.Context, usage models.KeyUsage)) *MockPrivateKeyGenericSource_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage))
	})
	return _c
}

func (_c *MockPrivateKeyGenericSource_SearchKeys_Call) Return(jWKs []*jwa.JWK, err error) *MockPrivateKeyGenericSource_SearchKeys_Call {
	_c.Call.Return(jWKs, err)
	return _c
}

func (_c *MockPrivateKeyGenericSource_SearchKeys_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage) ([]*jwa.JWK, error)) *MockPrivateKeyGenericSource_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublicKeyGenericSource creates a new instance of MockPublicKeyGenericSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublicKeyGenericSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublicKeyGenericSource {
	mock := &MockPublicKeyGenericSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPublicKeyGenericSource is an autogenerated mock type for the PublicKeyGenericSource type
type MockPublicKeyGenericSource struct {
	mock.Mock
}

type MockPublicKeyGenericSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublicKeyGenericSource) EXPECT() *MockPublicKeyGenericSource_Expecter {
	return &MockPublicKeyGenericSource_Expecter{mock: &_m.Mock}
}

// SearchKeys provides a mock function for the type MockPublicKeyGenericSource
func (_mock *MockPublicKeyGenericSource) SearchKeys(ctx context.Context, usage models.KeyUsage) ([]*jwa.JWK, error) {
	ret := _mock.Called(ctx, usage)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*jwa.JWK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) ([]*jwa.JWK, error)); ok {
		return returnFunc(ctx, usage)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) []*jwa.JWK); ok {
		r0 = returnFunc(ctx, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jwa.JWK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage) error); ok {
		r1 = returnFunc(ctx, usage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublicKeyGenericSource_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockPublicKeyGenericSource_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx
//   - usage
func (_e *MockPublicKeyGenericSource_Expecter) SearchKeys(ctx interface{}, usage interface{}) *MockPublicKeyGenericSource_SearchKeys_Call {
	return &MockPublicKeyGenericSource_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, usage)}
}

func (_c *MockPublicKeyGenericSource_SearchKeys_Call) Run(run func(ctx context.Context, usage models.KeyUsage)) *MockPublicKeyGenericSource_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage))
	})
	return _c
}

func (_c *MockPublicKeyGenericSource_SearchKeys_Call) Return(jWKs []*jwa.JWK, err error) *MockPublicKeyGenericSource_SearchKeys_Call {
	_c.Call.Return(jWKs, err)
	return _c
}

func (_c *MockPublicKeyGenericSource_SearchKeys_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage) ([]*jwa.JWK, error)) *MockPublicKeyGenericSource_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchKeysSource creates a new instance of MockSearchKeysSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchKeysSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchKeysSource {
	mock := &MockSearchKeysSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSearchKeysSource is an autogenerated mock type for the SearchKeysSource type
type MockSearchKeysSource struct {
	mock.Mock
}

type MockSearchKeysSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchKeysSource) EXPECT() *MockSearchKeysSource_Expecter {
	return &MockSearchKeysSource_Expecter{mock: &_m.Mock}
}

// SearchKeys provides a mock function for the type MockSearchKeysSource
func (_mock *MockSearchKeysSource) SearchKeys(ctx context.Context, usage models.KeyUsage) ([]*dao.KeyEntity, error) {
	ret := _mock.Called(ctx, usage)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*dao.KeyEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) ([]*dao.KeyEntity, error)); ok {
		return returnFunc(ctx, usage)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.KeyUsage) []*dao.KeyEntity); ok {
		r0 = returnFunc(ctx, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.KeyEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.KeyUsage) error); ok {
		r1 = returnFunc(ctx, usage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSearchKeysSource_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockSearchKeysSource_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx
//   - usage
func (_e *MockSearchKeysSource_Expecter) SearchKeys(ctx interface{}, usage interface{}) *MockSearchKeysSource_SearchKeys_Call {
	return &MockSearchKeysSource_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, usage)}
}

func (_c *MockSearchKeysSource_SearchKeys_Call) Run(run func(ctx context.Context, usage models.KeyUsage)) *MockSearchKeysSource_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage))
	})
	return _c
}

func (_c *MockSearchKeysSource_SearchKeys_Call) Return(keyEntitys []*dao.KeyEntity, err error) *MockSearchKeysSource_SearchKeys_Call {
	_c.Call.Return(keyEntitys, err)
	return _c
}

func (_c *MockSearchKeysSource_SearchKeys_Call) RunAndReturn(run func(ctx context.Context, usage models.KeyUsage) ([]*dao.KeyEntity, error)) *MockSearchKeysSource_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectKeySource creates a new instance of MockSelectKeySource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectKeySource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectKeySource {
	mock := &MockSelectKeySource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectKeySource is an autogenerated mock type for the SelectKeySource type
type MockSelectKeySource struct {
	mock.Mock
}

type MockSelectKeySource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectKeySource) EXPECT() *MockSelectKeySource_Expecter {
	return &MockSelectKeySource_Expecter{mock: &_m.Mock}
}

// SelectKey provides a mock function for the type MockSelectKeySource
func (_mock *MockSelectKeySource) SelectKey(ctx context.Context, id uuid.UUID) (*dao.KeyEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectKey")
	}

	var r0 *dao.KeyEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.KeyEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.KeyEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.KeyEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectKeySource_SelectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectKey'
type MockSelectKeySource_SelectKey_Call struct {
	*mock.Call
}

// SelectKey is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockSelectKeySource_Expecter) SelectKey(ctx interface{}, id interface{}) *MockSelectKeySource_SelectKey_Call {
	return &MockSelectKeySource_SelectKey_Call{Call: _e.mock.On("SelectKey", ctx, id)}
}

func (_c *MockSelectKeySource_SelectKey_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSelectKeySource_SelectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSelectKeySource_SelectKey_Call) Return(keyEntity *dao.KeyEntity, err error) *MockSelectKeySource_SelectKey_Call {
	_c.Call.Return(keyEntity, err)
	return _c
}

func (_c *MockSelectKeySource_SelectKey_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dao.KeyEntity, error)) *MockSelectKeySource_SelectKey_Call {
	_c.Call.Return(run)
	return _c
}
