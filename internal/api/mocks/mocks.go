// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package apimocks

import (
	"context"

	"github.com/a-novel-kit/jwt/jwa"
	"github.com/a-novel/service-json-keys/internal/services"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSelectKeyService creates a new instance of MockSelectKeyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectKeyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectKeyService {
	mock := &MockSelectKeyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSelectKeyService is an autogenerated mock type for the SelectKeyService type
type MockSelectKeyService struct {
	mock.Mock
}

type MockSelectKeyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectKeyService) EXPECT() *MockSelectKeyService_Expecter {
	return &MockSelectKeyService_Expecter{mock: &_m.Mock}
}

// SelectKey provides a mock function for the type MockSelectKeyService
func (_mock *MockSelectKeyService) SelectKey(ctx context.Context, request services.SelectKeyRequest) (*jwa.JWK, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SelectKey")
	}

	var r0 *jwa.JWK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectKeyRequest) (*jwa.JWK, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SelectKeyRequest) *jwa.JWK); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwa.JWK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SelectKeyRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSelectKeyService_SelectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectKey'
type MockSelectKeyService_SelectKey_Call struct {
	*mock.Call
}

// SelectKey is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.SelectKeyRequest
func (_e *MockSelectKeyService_Expecter) SelectKey(ctx interface{}, request interface{}) *MockSelectKeyService_SelectKey_Call {
	return &MockSelectKeyService_SelectKey_Call{Call: _e.mock.On("SelectKey", ctx, request)}
}

func (_c *MockSelectKeyService_SelectKey_Call) Run(run func(ctx context.Context, request services.SelectKeyRequest)) *MockSelectKeyService_SelectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.SelectKeyRequest
		if args[1] != nil {
			arg1 = args[1].(services.SelectKeyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSelectKeyService_SelectKey_Call) Return(jWK *jwa.JWK, err error) *MockSelectKeyService_SelectKey_Call {
	_c.Call.Return(jWK, err)
	return _c
}

func (_c *MockSelectKeyService_SelectKey_Call) RunAndReturn(run func(ctx context.Context, request services.SelectKeyRequest) (*jwa.JWK, error)) *MockSelectKeyService_SelectKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchKeysService creates a new instance of MockSearchKeysService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchKeysService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchKeysService {
	mock := &MockSearchKeysService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSearchKeysService is an autogenerated mock type for the SearchKeysService type
type MockSearchKeysService struct {
	mock.Mock
}

type MockSearchKeysService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchKeysService) EXPECT() *MockSearchKeysService_Expecter {
	return &MockSearchKeysService_Expecter{mock: &_m.Mock}
}

// SearchKeys provides a mock function for the type MockSearchKeysService
func (_mock *MockSearchKeysService) SearchKeys(ctx context.Context, request services.SearchKeysRequest) ([]*jwa.JWK, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*jwa.JWK
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SearchKeysRequest) ([]*jwa.JWK, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SearchKeysRequest) []*jwa.JWK); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jwa.JWK)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SearchKeysRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSearchKeysService_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockSearchKeysService_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.SearchKeysRequest
func (_e *MockSearchKeysService_Expecter) SearchKeys(ctx interface{}, request interface{}) *MockSearchKeysService_SearchKeys_Call {
	return &MockSearchKeysService_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, request)}
}

func (_c *MockSearchKeysService_SearchKeys_Call) Run(run func(ctx context.Context, request services.SearchKeysRequest)) *MockSearchKeysService_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.SearchKeysRequest
		if args[1] != nil {
			arg1 = args[1].(services.SearchKeysRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSearchKeysService_SearchKeys_Call) Return(jWKs []*jwa.JWK, err error) *MockSearchKeysService_SearchKeys_Call {
	_c.Call.Return(jWKs, err)
	return _c
}

func (_c *MockSearchKeysService_SearchKeys_Call) RunAndReturn(run func(ctx context.Context, request services.SearchKeysRequest) ([]*jwa.JWK, error)) *MockSearchKeysService_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSignClaimsService creates a new instance of MockSignClaimsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSignClaimsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSignClaimsService {
	mock := &MockSignClaimsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSignClaimsService is an autogenerated mock type for the SignClaimsService type
type MockSignClaimsService struct {
	mock.Mock
}

type MockSignClaimsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSignClaimsService) EXPECT() *MockSignClaimsService_Expecter {
	return &MockSignClaimsService_Expecter{mock: &_m.Mock}
}

// SignClaims provides a mock function for the type MockSignClaimsService
func (_mock *MockSignClaimsService) SignClaims(ctx context.Context, request services.SignClaimsRequest) (string, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SignClaims")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SignClaimsRequest) (string, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, services.SignClaimsRequest) string); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, services.SignClaimsRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSignClaimsService_SignClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignClaims'
type MockSignClaimsService_SignClaims_Call struct {
	*mock.Call
}

// SignClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.SignClaimsRequest
func (_e *MockSignClaimsService_Expecter) SignClaims(ctx interface{}, request interface{}) *MockSignClaimsService_SignClaims_Call {
	return &MockSignClaimsService_SignClaims_Call{Call: _e.mock.On("SignClaims", ctx, request)}
}

func (_c *MockSignClaimsService_SignClaims_Call) Run(run func(ctx context.Context, request services.SignClaimsRequest)) *MockSignClaimsService_SignClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 services.SignClaimsRequest
		if args[1] != nil {
			arg1 = args[1].(services.SignClaimsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSignClaimsService_SignClaims_Call) Return(s string, err error) *MockSignClaimsService_SignClaims_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSignClaimsService_SignClaims_Call) RunAndReturn(run func(ctx context.Context, request services.SignClaimsRequest) (string, error)) *MockSignClaimsService_SignClaims_Call {
	_c.Call.Return(run)
	return _c
}
