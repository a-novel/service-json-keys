// Code generated by ogen, DO NOT EDIT.

package codegen

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *UnexpectedErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// The algorithm this key can be used for.
// Ref: #/components/schemas/Alg
type Alg string

const (
	AlgHS256            Alg = "HS256"
	AlgHS384            Alg = "HS384"
	AlgHS512            Alg = "HS512"
	AlgRS256            Alg = "RS256"
	AlgRS384            Alg = "RS384"
	AlgRS512            Alg = "RS512"
	AlgES256            Alg = "ES256"
	AlgES384            Alg = "ES384"
	AlgES512            Alg = "ES512"
	AlgPS256            Alg = "PS256"
	AlgPS384            Alg = "PS384"
	AlgPS512            Alg = "PS512"
	AlgEdDSA            Alg = "EdDSA"
	AlgRSAOAEP          Alg = "RSA-OAEP"
	AlgRSAOAEP256       Alg = "RSA-OAEP-256"
	AlgA128KW           Alg = "A128KW"
	AlgA192KW           Alg = "A192KW"
	AlgA256KW           Alg = "A256KW"
	AlgDir              Alg = "dir"
	AlgECDHES           Alg = "ECDH-ES"
	AlgECDHESA128KW     Alg = "ECDH-ES+A128KW"
	AlgECDHESA192KW     Alg = "ECDH-ES+A192KW"
	AlgECDHESA256KW     Alg = "ECDH-ES+A256KW"
	AlgA128GCMKW        Alg = "A128GCMKW"
	AlgA192GCMKW        Alg = "A192GCMKW"
	AlgA256GCMKW        Alg = "A256GCMKW"
	AlgPBES2HS256A128KW Alg = "PBES2-HS256+A128KW"
	AlgPBES2HS384A192KW Alg = "PBES2-HS384+A192KW"
	AlgPBES2HS512A256KW Alg = "PBES2-HS512+A256KW"
	AlgA128CBCHS256     Alg = "A128CBC-HS256"
	AlgA192CBCHS384     Alg = "A192CBC-HS384"
	AlgA256CBCHS512     Alg = "A256CBC-HS512"
	AlgA128GCM          Alg = "A128GCM"
	AlgA192GCM          Alg = "A192GCM"
	AlgA256GCM          Alg = "A256GCM"
)

// AllValues returns all Alg values.
func (Alg) AllValues() []Alg {
	return []Alg{
		AlgHS256,
		AlgHS384,
		AlgHS512,
		AlgRS256,
		AlgRS384,
		AlgRS512,
		AlgES256,
		AlgES384,
		AlgES512,
		AlgPS256,
		AlgPS384,
		AlgPS512,
		AlgEdDSA,
		AlgRSAOAEP,
		AlgRSAOAEP256,
		AlgA128KW,
		AlgA192KW,
		AlgA256KW,
		AlgDir,
		AlgECDHES,
		AlgECDHESA128KW,
		AlgECDHESA192KW,
		AlgECDHESA256KW,
		AlgA128GCMKW,
		AlgA192GCMKW,
		AlgA256GCMKW,
		AlgPBES2HS256A128KW,
		AlgPBES2HS384A192KW,
		AlgPBES2HS512A256KW,
		AlgA128CBCHS256,
		AlgA192CBCHS384,
		AlgA256CBCHS512,
		AlgA128GCM,
		AlgA192GCM,
		AlgA256GCM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Alg) MarshalText() ([]byte, error) {
	switch s {
	case AlgHS256:
		return []byte(s), nil
	case AlgHS384:
		return []byte(s), nil
	case AlgHS512:
		return []byte(s), nil
	case AlgRS256:
		return []byte(s), nil
	case AlgRS384:
		return []byte(s), nil
	case AlgRS512:
		return []byte(s), nil
	case AlgES256:
		return []byte(s), nil
	case AlgES384:
		return []byte(s), nil
	case AlgES512:
		return []byte(s), nil
	case AlgPS256:
		return []byte(s), nil
	case AlgPS384:
		return []byte(s), nil
	case AlgPS512:
		return []byte(s), nil
	case AlgEdDSA:
		return []byte(s), nil
	case AlgRSAOAEP:
		return []byte(s), nil
	case AlgRSAOAEP256:
		return []byte(s), nil
	case AlgA128KW:
		return []byte(s), nil
	case AlgA192KW:
		return []byte(s), nil
	case AlgA256KW:
		return []byte(s), nil
	case AlgDir:
		return []byte(s), nil
	case AlgECDHES:
		return []byte(s), nil
	case AlgECDHESA128KW:
		return []byte(s), nil
	case AlgECDHESA192KW:
		return []byte(s), nil
	case AlgECDHESA256KW:
		return []byte(s), nil
	case AlgA128GCMKW:
		return []byte(s), nil
	case AlgA192GCMKW:
		return []byte(s), nil
	case AlgA256GCMKW:
		return []byte(s), nil
	case AlgPBES2HS256A128KW:
		return []byte(s), nil
	case AlgPBES2HS384A192KW:
		return []byte(s), nil
	case AlgPBES2HS512A256KW:
		return []byte(s), nil
	case AlgA128CBCHS256:
		return []byte(s), nil
	case AlgA192CBCHS384:
		return []byte(s), nil
	case AlgA256CBCHS512:
		return []byte(s), nil
	case AlgA128GCM:
		return []byte(s), nil
	case AlgA192GCM:
		return []byte(s), nil
	case AlgA256GCM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Alg) UnmarshalText(data []byte) error {
	switch Alg(data) {
	case AlgHS256:
		*s = AlgHS256
		return nil
	case AlgHS384:
		*s = AlgHS384
		return nil
	case AlgHS512:
		*s = AlgHS512
		return nil
	case AlgRS256:
		*s = AlgRS256
		return nil
	case AlgRS384:
		*s = AlgRS384
		return nil
	case AlgRS512:
		*s = AlgRS512
		return nil
	case AlgES256:
		*s = AlgES256
		return nil
	case AlgES384:
		*s = AlgES384
		return nil
	case AlgES512:
		*s = AlgES512
		return nil
	case AlgPS256:
		*s = AlgPS256
		return nil
	case AlgPS384:
		*s = AlgPS384
		return nil
	case AlgPS512:
		*s = AlgPS512
		return nil
	case AlgEdDSA:
		*s = AlgEdDSA
		return nil
	case AlgRSAOAEP:
		*s = AlgRSAOAEP
		return nil
	case AlgRSAOAEP256:
		*s = AlgRSAOAEP256
		return nil
	case AlgA128KW:
		*s = AlgA128KW
		return nil
	case AlgA192KW:
		*s = AlgA192KW
		return nil
	case AlgA256KW:
		*s = AlgA256KW
		return nil
	case AlgDir:
		*s = AlgDir
		return nil
	case AlgECDHES:
		*s = AlgECDHES
		return nil
	case AlgECDHESA128KW:
		*s = AlgECDHESA128KW
		return nil
	case AlgECDHESA192KW:
		*s = AlgECDHESA192KW
		return nil
	case AlgECDHESA256KW:
		*s = AlgECDHESA256KW
		return nil
	case AlgA128GCMKW:
		*s = AlgA128GCMKW
		return nil
	case AlgA192GCMKW:
		*s = AlgA192GCMKW
		return nil
	case AlgA256GCMKW:
		*s = AlgA256GCMKW
		return nil
	case AlgPBES2HS256A128KW:
		*s = AlgPBES2HS256A128KW
		return nil
	case AlgPBES2HS384A192KW:
		*s = AlgPBES2HS384A192KW
		return nil
	case AlgPBES2HS512A256KW:
		*s = AlgPBES2HS512A256KW
		return nil
	case AlgA128CBCHS256:
		*s = AlgA128CBCHS256
		return nil
	case AlgA192CBCHS384:
		*s = AlgA192CBCHS384
		return nil
	case AlgA256CBCHS512:
		*s = AlgA256CBCHS512
		return nil
	case AlgA128GCM:
		*s = AlgA128GCM
		return nil
	case AlgA192GCM:
		*s = AlgA192GCM
		return nil
	case AlgA256GCM:
		*s = AlgA256GCM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Dependency
type Dependency struct {
	// The name of the dependency.
	Name            string           `json:"name"`
	Status          DependencyStatus `json:"status"`
	AdditionalProps DependencyAdditional
}

// GetName returns the value of Name.
func (s *Dependency) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *Dependency) GetStatus() DependencyStatus {
	return s.Status
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *Dependency) GetAdditionalProps() DependencyAdditional {
	return s.AdditionalProps
}

// SetName sets the value of Name.
func (s *Dependency) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *Dependency) SetStatus(val DependencyStatus) {
	s.Status = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *Dependency) SetAdditionalProps(val DependencyAdditional) {
	s.AdditionalProps = val
}

type DependencyAdditional map[string]jx.Raw

func (s *DependencyAdditional) init() DependencyAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The status of a dependency.
// Ref: #/components/schemas/DependencyStatus
type DependencyStatus string

const (
	DependencyStatusUp      DependencyStatus = "up"
	DependencyStatusDown    DependencyStatus = "down"
	DependencyStatusUnknown DependencyStatus = "unknown"
)

// AllValues returns all DependencyStatus values.
func (DependencyStatus) AllValues() []DependencyStatus {
	return []DependencyStatus{
		DependencyStatusUp,
		DependencyStatusDown,
		DependencyStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DependencyStatus) MarshalText() ([]byte, error) {
	switch s {
	case DependencyStatusUp:
		return []byte(s), nil
	case DependencyStatusDown:
		return []byte(s), nil
	case DependencyStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DependencyStatus) UnmarshalText(data []byte) error {
	switch DependencyStatus(data) {
	case DependencyStatusUp:
		*s = DependencyStatusUp
		return nil
	case DependencyStatusDown:
		*s = DependencyStatusDown
		return nil
	case DependencyStatusUnknown:
		*s = DependencyStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ForbiddenError
type ForbiddenError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *ForbiddenError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *ForbiddenError) SetError(val string) {
	s.Error = val
}

func (*ForbiddenError) getPublicKeyRes()   {}
func (*ForbiddenError) listPublicKeysRes() {}
func (*ForbiddenError) signClaimsRes()     {}

// Ref: #/components/schemas/Health
type Health struct {
	Postgres Dependency `json:"postgres"`
}

// GetPostgres returns the value of Postgres.
func (s *Health) GetPostgres() Dependency {
	return s.Postgres
}

// SetPostgres sets the value of Postgres.
func (s *Health) SetPostgres(val Dependency) {
	s.Postgres = val
}

func (*Health) healthcheckRes() {}

// HealthcheckIMATeapot is response for Healthcheck operation.
type HealthcheckIMATeapot struct{}

func (*HealthcheckIMATeapot) healthcheckRes() {}

// Ref: #/components/schemas/JWK
type JWK struct {
	Kty             KTY     `json:"kty"`
	Use             Use     `json:"use"`
	KeyOps          []KeyOp `json:"key_ops"`
	Alg             Alg     `json:"alg"`
	Kid             OptKID  `json:"kid"`
	AdditionalProps JWKAdditional
}

// GetKty returns the value of Kty.
func (s *JWK) GetKty() KTY {
	return s.Kty
}

// GetUse returns the value of Use.
func (s *JWK) GetUse() Use {
	return s.Use
}

// GetKeyOps returns the value of KeyOps.
func (s *JWK) GetKeyOps() []KeyOp {
	return s.KeyOps
}

// GetAlg returns the value of Alg.
func (s *JWK) GetAlg() Alg {
	return s.Alg
}

// GetKid returns the value of Kid.
func (s *JWK) GetKid() OptKID {
	return s.Kid
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *JWK) GetAdditionalProps() JWKAdditional {
	return s.AdditionalProps
}

// SetKty sets the value of Kty.
func (s *JWK) SetKty(val KTY) {
	s.Kty = val
}

// SetUse sets the value of Use.
func (s *JWK) SetUse(val Use) {
	s.Use = val
}

// SetKeyOps sets the value of KeyOps.
func (s *JWK) SetKeyOps(val []KeyOp) {
	s.KeyOps = val
}

// SetAlg sets the value of Alg.
func (s *JWK) SetAlg(val Alg) {
	s.Alg = val
}

// SetKid sets the value of Kid.
func (s *JWK) SetKid(val OptKID) {
	s.Kid = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *JWK) SetAdditionalProps(val JWKAdditional) {
	s.AdditionalProps = val
}

func (*JWK) getPublicKeyRes() {}

type JWKAdditional map[string]jx.Raw

func (s *JWKAdditional) init() JWKAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type KID uuid.UUID

// The type of the key embedded in the JWK.
// Ref: #/components/schemas/KTY
type KTY string

const (
	KTYOct KTY = "oct"
	KTYRSA KTY = "RSA"
	KTYEC  KTY = "EC"
	KTYOKP KTY = "OKP"
)

// AllValues returns all KTY values.
func (KTY) AllValues() []KTY {
	return []KTY{
		KTYOct,
		KTYRSA,
		KTYEC,
		KTYOKP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KTY) MarshalText() ([]byte, error) {
	switch s {
	case KTYOct:
		return []byte(s), nil
	case KTYRSA:
		return []byte(s), nil
	case KTYEC:
		return []byte(s), nil
	case KTYOKP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KTY) UnmarshalText(data []byte) error {
	switch KTY(data) {
	case KTYOct:
		*s = KTYOct
		return nil
	case KTYRSA:
		*s = KTYRSA
		return nil
	case KTYEC:
		*s = KTYEC
		return nil
	case KTYOKP:
		*s = KTYOKP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The operation that can be performed using the key.
// Ref: #/components/schemas/KeyOp
type KeyOp string

const (
	KeyOpSign       KeyOp = "sign"
	KeyOpVerify     KeyOp = "verify"
	KeyOpEncrypt    KeyOp = "encrypt"
	KeyOpDecrypt    KeyOp = "decrypt"
	KeyOpWrapKey    KeyOp = "wrapKey"
	KeyOpUnwrapKey  KeyOp = "unwrapKey"
	KeyOpDeriveKey  KeyOp = "deriveKey"
	KeyOpDeriveBits KeyOp = "deriveBits"
)

// AllValues returns all KeyOp values.
func (KeyOp) AllValues() []KeyOp {
	return []KeyOp{
		KeyOpSign,
		KeyOpVerify,
		KeyOpEncrypt,
		KeyOpDecrypt,
		KeyOpWrapKey,
		KeyOpUnwrapKey,
		KeyOpDeriveKey,
		KeyOpDeriveBits,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyOp) MarshalText() ([]byte, error) {
	switch s {
	case KeyOpSign:
		return []byte(s), nil
	case KeyOpVerify:
		return []byte(s), nil
	case KeyOpEncrypt:
		return []byte(s), nil
	case KeyOpDecrypt:
		return []byte(s), nil
	case KeyOpWrapKey:
		return []byte(s), nil
	case KeyOpUnwrapKey:
		return []byte(s), nil
	case KeyOpDeriveKey:
		return []byte(s), nil
	case KeyOpDeriveBits:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyOp) UnmarshalText(data []byte) error {
	switch KeyOp(data) {
	case KeyOpSign:
		*s = KeyOpSign
		return nil
	case KeyOpVerify:
		*s = KeyOpVerify
		return nil
	case KeyOpEncrypt:
		*s = KeyOpEncrypt
		return nil
	case KeyOpDecrypt:
		*s = KeyOpDecrypt
		return nil
	case KeyOpWrapKey:
		*s = KeyOpWrapKey
		return nil
	case KeyOpUnwrapKey:
		*s = KeyOpUnwrapKey
		return nil
	case KeyOpDeriveKey:
		*s = KeyOpDeriveKey
		return nil
	case KeyOpDeriveBits:
		*s = KeyOpDeriveBits
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The intended usage of the key.
// Ref: #/components/schemas/KeyUsage
type KeyUsage string

const (
	KeyUsageAuth    KeyUsage = "auth"
	KeyUsageRefresh KeyUsage = "refresh"
)

// AllValues returns all KeyUsage values.
func (KeyUsage) AllValues() []KeyUsage {
	return []KeyUsage{
		KeyUsageAuth,
		KeyUsageRefresh,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeyUsage) MarshalText() ([]byte, error) {
	switch s {
	case KeyUsageAuth:
		return []byte(s), nil
	case KeyUsageRefresh:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeyUsage) UnmarshalText(data []byte) error {
	switch KeyUsage(data) {
	case KeyUsageAuth:
		*s = KeyUsageAuth
		return nil
	case KeyUsageRefresh:
		*s = KeyUsageRefresh
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPublicKeysOKApplicationJSON []JWK

func (*ListPublicKeysOKApplicationJSON) listPublicKeysRes() {}

// Ref: #/components/schemas/NotFoundError
type NotFoundError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFoundError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFoundError) SetError(val string) {
	s.Error = val
}

func (*NotFoundError) getPublicKeyRes() {}

// NewOptKID returns new OptKID with value set to v.
func NewOptKID(v KID) OptKID {
	return OptKID{
		Value: v,
		Set:   true,
	}
}

// OptKID is optional KID.
type OptKID struct {
	Value KID
	Set   bool
}

// IsSet returns true if OptKID was set.
func (o OptKID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKID) Reset() {
	var v KID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKID) SetTo(v KID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKID) Get() (v KID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKID) Or(d KID) KID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PingIMATeapot is response for Ping operation.
type PingIMATeapot struct{}

func (*PingIMATeapot) pingRes() {}

type PingOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PingOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*PingOK) pingRes() {}

// The claims to be signed. The structure of the claims depends on the intended usage of the key.
// For example, for authentication, it may include user ID, roles, and expiration time.
type SignClaimsReq map[string]jx.Raw

func (s *SignClaimsReq) init() SignClaimsReq {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Token
type Token struct {
	// The signed token.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *Token) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Token) SetToken(val string) {
	s.Token = val
}

func (*Token) signClaimsRes() {}

// Ref: #/components/schemas/UnauthorizedError
type UnauthorizedError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorizedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorizedError) SetError(val string) {
	s.Error = val
}

func (*UnauthorizedError) getPublicKeyRes()   {}
func (*UnauthorizedError) listPublicKeysRes() {}
func (*UnauthorizedError) signClaimsRes()     {}

// Ref: #/components/schemas/UnexpectedError
type UnexpectedError struct {
	// The error message.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnexpectedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnexpectedError) SetError(val string) {
	s.Error = val
}

// UnexpectedErrorStatusCode wraps UnexpectedError with StatusCode.
type UnexpectedErrorStatusCode struct {
	StatusCode int
	Response   UnexpectedError
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrorStatusCode) GetResponse() UnexpectedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrorStatusCode) SetResponse(val UnexpectedError) {
	s.Response = val
}

// The intended use of the public key.
// Ref: #/components/schemas/Use
type Use string

const (
	UseSig Use = "sig"
	UseEnc Use = "enc"
)

// AllValues returns all Use values.
func (Use) AllValues() []Use {
	return []Use{
		UseSig,
		UseEnc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Use) MarshalText() ([]byte, error) {
	switch s {
	case UseSig:
		return []byte(s), nil
	case UseEnc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Use) UnmarshalText(data []byte) error {
	switch Use(data) {
	case UseSig:
		*s = UseSig
		return nil
	case UseEnc:
		*s = UseEnc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
