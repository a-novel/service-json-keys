# https://github.com/OAI/OpenAPI-Specification
# https://github.com/OAI/OpenAPI-Specification/releases
openapi: 3.1.1
servers:
  - url: http://127.0.0.1:4001/v1

info:
  title: A-Novel JSON keys API.
  description: |
    The A-Novel JSON keys API, for internal use by A-Novel services.
  contact:
    name: A-Novel
    email: support@agoradesecrivains.com
  license:
    name: GNU AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  version: v1

# ======================================================================================================================
# Tags
# ======================================================================================================================

tags:
  - name: health
    description: Routes used to check the health of the service.
  - name: jwk
    description: Routes exposing the public keys used for JSON Web Algorithms.
# ======================================================================================================================
# Paths
# ======================================================================================================================

paths:
  /ping:
    get:
      security: []
      tags:
        - health
      summary: Check the status of the service.
      description: |
        Check the status of the service. If the service is running, a successful response is returned.
      operationId: ping
      responses:
        "200":
          description: The service is running.
          content:
            text/plain:
              schema:
                type: string
        "418":
          description: This route is not expected to fail under normal circumstances.
        default:
          description: API is not available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"

  /healthcheck:
    get:
      security: []
      tags:
        - health
      summary: Check the health of the service.
      description: |
        Returns a detailed report of the health of the service, including every dependency.
      operationId: healthcheck
      responses:
        "200":
          description: The service is running.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
        "418":
          description: This route is not expected to fail under normal circumstances.
        default:
          description: API is not available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"

  /public-keys:
    get:
      tags:
        - jwk
      security: []
      summary: Get the public keys used for JSON Web Algorithms.
      description: |
        Get a public key from its usage.
      parameters:
        - $ref: "#/components/parameters/KID"
      operationId: getPublicKey
      responses:
        "200":
          description: The public key have been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWK"
        "401":
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Access denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: The provided key usage does not match any key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"

  /public-keys/list:
    get:
      tags:
        - jwk
      security: []
      summary: List all public keys used for JSON Web Algorithms.
      description: |
        Get all public keys from the service that match a given usage.
      parameters:
        - name: usage
          in: query
          description: The intended usage of the keys.
          required: true
          schema:
            $ref: "#/components/schemas/KeyUsage"
      operationId: listPublicKeys
      responses:
        "200":
          description: The public keys were retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JWK"
        "401":
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Access denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        default:
          description: An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"

  /payload/sign:
    post:
      tags:
        - jwk
      security: []
      summary: Sign a payload using the configuration for the target usage.
      parameters:
        - name: usage
          in: query
          description: The intended usage of the keys.
          required: true
          schema:
            $ref: "#/components/schemas/KeyUsage"
      requestBody:
        $ref: "#/components/requestBodies/Claims"
      operationId: signClaims
      responses:
        "200":
          description: The public keys were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Access denied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        default:
          description: An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"

# ======================================================================================================================
# Components
# ======================================================================================================================

components:
  # ======================================================= SCHEMAS ====================================================
  schemas:
    DependencyStatus:
      type: string
      description: The status of a dependency.
      example: ok
      enum:
        - up
        - down
        - unknown
    Dependency:
      type: object
      required:
        - name
        - status
      additionalProperties: true
      properties:
        name:
          type: string
          description: The name of the dependency.
          example: database
        status:
          $ref: "#/components/schemas/DependencyStatus"
    Health:
      type: object
      required:
        - postgres
      properties:
        postgres:
          $ref: "#/components/schemas/Dependency"

    KeyUsage:
      type: string
      description: The intended usage of the key.
      example: auth
      enum:
        - auth
        - refresh
    JWK:
      type: object
      required:
        - kty
        - use
        - key_ops
        - alg
      additionalProperties: true
      properties:
        kty:
          $ref: "#/components/schemas/KTY"
        use:
          $ref: "#/components/schemas/Use"
        key_ops:
          type: array
          example: ["sign", "verify"]
          items:
            $ref: "#/components/schemas/KeyOp"
        alg:
          $ref: "#/components/schemas/Alg"
        kid:
          $ref: "#/components/schemas/KID"
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: The signed token.

    # ======================================================== TYPES =======================================================
    KTY:
      type: string
      description: The type of the key embedded in the JWK.
      example: OKP
      enum:
        - oct
        - RSA
        - EC
        - OKP
    Use:
      type: string
      description: The intended use of the public key.
      example: sig
      enum:
        - sig
        - enc
    KeyOp:
      type: string
      description: The operation that can be performed using the key.
      example: sign
      enum:
        - sign
        - verify
        - encrypt
        - decrypt
        - wrapKey
        - unwrapKey
        - deriveKey
        - deriveBits
    Alg:
      type: string
      description: The algorithm this key can be used for.
      example: EdDSA
      enum:
        - HS256
        - HS384
        - HS512
        - RS256
        - RS384
        - RS512
        - ES256
        - ES384
        - ES512
        - PS256
        - PS384
        - PS512
        - EdDSA
        - RSA-OAEP
        - RSA-OAEP-256
        - A128KW
        - A192KW
        - A256KW
        - dir
        - ECDH-ES
        - ECDH-ES+A128KW
        - ECDH-ES+A192KW
        - ECDH-ES+A256KW
        - A128GCMKW
        - A192GCMKW
        - A256GCMKW
        - PBES2-HS256+A128KW
        - PBES2-HS384+A192KW
        - PBES2-HS512+A256KW
        # Enc values.
        - A128CBC-HS256
        - A192CBC-HS384
        - A256CBC-HS512
        - A128GCM
        - A192GCM
        - A256GCM
    KID:
      type: string
      description: The unique identifier of the key, conveyed through its KID field.
      example: 29f71c01-5ae1-4b01-b729-e17488538e15
      format: uuid
    # ======================================================= ERRORS =======================================================
    UnauthorizedError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message.
          example: The provided access token is not valid.
    ForbiddenError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message.
          example: Authentication failed due to incorrect information.
    NotFoundError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message.
          example: The provided credentials do not match any user.W
    UnexpectedError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message.
          example: An unexpected error occurred while processing the request.
  # =================================================== REQUEST BODIES =================================================
  requestBodies:
    Claims:
      required: true
      description: The claims to be signed.
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
            description: |
              The claims to be signed. The structure of the claims depends on the intended usage of the key.
              For example, for authentication, it may include user ID, roles, and expiration time.
  # ================================================== QUERY PARAMETERS ================================================
  parameters:
    KID:
      name: kid
      in: query
      description: The unique identifier of the key, conveyed through its KID field.
      required: true
      schema:
        $ref: "#/components/schemas/KID"
